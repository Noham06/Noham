import numpy as np
import matplotlib.pyplot as plt
from skimage import data, img_as_float
from skimage.util import random_noise
from numpy.fft import fft2, ifft2, fftshift

# Charger l'image d'exemple depuis skimage
image = img_as_float(data.camera())

# Ajouter du bruit gaussien à l'image
noisy_image = random_noise(image, mode='gaussian', var=0.05)

# Effectuer la transformée de Fourier sur l'image bruitée
f_transform = fft2(noisy_image)
f_transform_shifted = fftshift(f_transform)

# Définir un filtre passe-bas simple (masquage des hautes fréquences)
rows, cols = image.shape
crow, ccol = rows // 2 , cols // 2
mask = np.zeros((rows, cols), np.uint8)
r = 55 # Rayon du filtre passe-bas
center = [crow, ccol]
for i in range(rows):
    for j in range(cols):
        if np.sqrt((i-center[0])**2 + (j-center[1])**2) < r:
            mask[i, j] = 1

# Appliquer le masque à l'image transformée de Fourier
f_transform_shifted_filtered = f_transform_shifted * mask

# Effectuer la transformée de Fourier inverse
inverse_f_transform_shifted = np.fft.ifftshift(f_transform_shifted_filtered)
denoised_image = ifft2(inverse_f_transform_shifted)
denoised_image = np.abs(denoised_image)

# Afficher l'image originale, l'image bruitée, et l'image débruitée
fig, axes = plt.subplots(1, 3, figsize=(15, 5))
axes[0].imshow(image, cmap='gray')
axes[0].set_title('Image Originale')
axes[0].axis('off')

axes[1].imshow(noisy_image, cmap='gray')
axes[1].set_title('Image Bruitée')
axes[1].axis('off')

axes[2].imshow(denoised_image, cmap='gray')
axes[2].set_title('Image Débruitée (Filtre Passe-Bas)')
axes[2].axis('off')

plt.tight_layout()
plt.show()

# Sauvegarder les images
plt.imsave('original_image.png', image, cmap='gray')
plt.imsave('noisy_image.png', noisy_image, cmap='gray')
plt.imsave('denoised_image.png', denoised_image, cmap='gray')
